"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchMixin = void 0;

var _esm = require("rxjs/_esm5");

var _ajax = require("rxjs/_esm5/ajax");

var _operators = require("rxjs/_esm5/operators");

var _common = require("../common");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var fetchMixin = function fetchMixin(C) {
  return /*#__PURE__*/function (_C) {
    _inherits(_class, _C);

    var _super = _createSuper(_class);

    function _class() {
      _classCallCheck(this, _class);

      return _super.apply(this, arguments);
    }

    _createClass(_class, [{
      key: "makeRequest",
      // ## Fetching
      value: function makeRequest(context) {
        var _this = this;

        return (0, _ajax.ajax)({
          method: "GET",
          responseType: "text",
          url: context.url,
          crossDomain: (0, _common.isExternal)(this),
          headers: {
            Accept: "text/html"
          }
        }).pipe((0, _operators.map)(function (_ref) {
          var response = _ref.response;
          return Object.assign(context, {
            response: response
          });
        }), (0, _operators.catchError)(function (error) {
          return _this.recoverIfResponse(context, error);
        }));
      } // The `ajax` method will throw when it encoutners an a 400+ status code,
      // however these are still valid responses from the server that can be shown using this component.
      // This assumes error pages have the same HTML strcuture as the other pages though.

    }, {
      key: "recoverIfResponse",
      value: function recoverIfResponse(context, error) {
        var status = error.status,
            xhr = error.xhr; // If we have a response, recover and continue with the pipeline.
        // HACK: Letting ~~servers~~ service workers respond with 598 to force a network error on the component.

        if (xhr && xhr.response && status > 400 && status < 598) {
          return (0, _esm.of)(Object.assign(context, {
            response: xhr.response
          }));
        } // If we don't have a response, this is an acutal error that should be dealt with.


        return (0, _esm.of)(Object.assign(context, {
          error: error
        }));
      } // This function returns the request that matches a given URL.
      // The way the pipeline is set up,
      // it is either the `latestPrefetch` value (when the request is already completed),
      // or the next value on the prefetch observable (when still in progress).

    }, {
      key: "getFetch$",
      value: function getFetch$(_ref2, latestPrefetch, prefetch$) {
        var href = _ref2.url.href;
        return href === latestPrefetch.url.href && latestPrefetch.error == null ? (0, _esm.of)(latestPrefetch) : prefetch$.pipe((0, _operators.take)(1));
      } // Returns an observable that emits exactly one notice, which contains the response.
      // It will not emit until an (optional) page transition animation completes.

    }, {
      key: "getResponse",
      value: function getResponse(prefetch$, _ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            context = _ref4[0],
            latestPrefetch = _ref4[1];

        return (0, _esm.zip)(this.getFetch$(context, latestPrefetch, prefetch$).pipe((0, _operators.map)(function (fetch) {
          return Object.assign(fetch, context);
        })), this.animPromise, function (x) {
          return x;
        });
      }
    }]);

    return _class;
  }(C);
};

exports.fetchMixin = fetchMixin;