"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateMixin = void 0;

var _common = require("../common");

var _scriptHack = require("./script-hack");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var updateMixin = function updateMixin(C) {
  return /*#__PURE__*/function (_scriptMixin) {
    _inherits(_class, _scriptMixin);

    var _super = _createSuper(_class);

    function _class() {
      _classCallCheck(this, _class);

      return _super.apply(this, arguments);
    }

    _createClass(_class, [{
      key: "getTitle",
      // Extracts the title of the page
      value: function getTitle(fragment) {
        return (fragment.querySelector("title") || {}).textContent;
      } // Extracts the elements to be replaced

    }, {
      key: "getReplaceElements",
      value: function getReplaceElements(fragment) {
        if (this.replaceIds.length > 0) {
          return this.replaceIds.map(function (id) {
            return fragment.getElementById(id);
          });
        } else if (this.el.id) {
          return [fragment.getElementById(this.el.id)];
        } else {
          var index = Array.from(document.getElementsByTagName(this.el.tagName)).indexOf(this.el);
          return [fragment.querySelectorAll(this.el.tagName)[index]];
        }
      } // Takes the response string and turns it into document fragments
      // that can be inserted into the DOM.

    }, {
      key: "responseToContent",
      value: function responseToContent(context) {
        var response = context.response;
        var documentFragment = (0, _common.fragmentFromString)(response);
        var title = this.getTitle(documentFragment);
        var replaceEls = this.getReplaceElements(documentFragment);

        if (replaceEls.some(function (x) {
          return x == null;
        })) {
          throw Object.assign(context, {
            replaceElMissing: true
          });
        }

        var scripts = this.scriptSelector ? this.tempRemoveScriptTags(replaceEls) : [];
        return Object.assign(context, {
          documentFragment: documentFragment,
          title: title,
          replaceEls: replaceEls,
          scripts: scripts
        });
      } // Replaces the old elments with the new one, one-by-one.

    }, {
      key: "replaceContentByIds",
      value: function replaceContentByIds(elements) {
        this.replaceIds.map(function (id) {
          return document.getElementById(id);
        }).forEach(function (oldElement, i) {
          return oldElement.parentNode.replaceChild(elements[i], oldElement);
        });
      } // When no `relaceIds` are set, replace the entire content of the component (slow).

    }, {
      key: "replaceContentWholesale",
      value: function replaceContentWholesale(_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            el = _ref2[0];

        this.el.innerHTML = el.innerHTML;
      } // TODO: doc

    }, {
      key: "replaceContent",
      value: function replaceContent(replaceEls) {
        if (this.replaceIds.length > 0) {
          this.replaceContentByIds(replaceEls);
        } else {
          this.replaceContentWholesale(replaceEls);
        }
      } // TODO: doc

    }, {
      key: "updateDOM",
      value: function updateDOM(context) {
        try {
          var replaceEls = context.replaceEls;
          this.updateHistoryTitle(context);
          if ((0, _common.isExternal)(this)) this.rewriteURLs(replaceEls);
          this.replaceContent(replaceEls);
        } catch (error) {
          throw Object.assign(context, {
            error: error
          });
        }
      } // When fetching documents from an external source,
      // relative URLs will be resolved relative to the current `window.location`.
      // We can rewrite URL to absolute urls

    }, {
      key: "rewriteURLs",
      value: function rewriteURLs(replaceEls) {
        var _this = this;

        replaceEls.forEach(function (el) {
          /* console.time(); */
          el.querySelectorAll("[href]").forEach(_this.rewriteURL("href"));
          el.querySelectorAll("[src]").forEach(_this.rewriteURL("src"));
          el.querySelectorAll("img[srcset]").forEach(_this.rewriteURLSrcSet("srcset"));
          el.querySelectorAll("blockquote[cite]").forEach(_this.rewriteURL("cite"));
          el.querySelectorAll("del[cite]").forEach(_this.rewriteURL("cite"));
          el.querySelectorAll("ins[cite]").forEach(_this.rewriteURL("cite"));
          el.querySelectorAll("q[cite]").forEach(_this.rewriteURL("cite"));
          el.querySelectorAll("img[longdesc]").forEach(_this.rewriteURL("longdesc"));
          el.querySelectorAll("frame[longdesc]").forEach(_this.rewriteURL("longdesc"));
          el.querySelectorAll("iframe[longdesc]").forEach(_this.rewriteURL("longdesc"));
          el.querySelectorAll("img[usemap]").forEach(_this.rewriteURL("usemap"));
          el.querySelectorAll("input[usemap]").forEach(_this.rewriteURL("usemap"));
          el.querySelectorAll("object[usemap]").forEach(_this.rewriteURL("usemap"));
          el.querySelectorAll("form[action]").forEach(_this.rewriteURL("action"));
          el.querySelectorAll("button[formaction]").forEach(_this.rewriteURL("formaction"));
          el.querySelectorAll("input[formaction]").forEach(_this.rewriteURL("formaction"));
          el.querySelectorAll("video[poster]").forEach(_this.rewriteURL("poster"));
          el.querySelectorAll("object[data]").forEach(_this.rewriteURL("data"));
          el.querySelectorAll("object[codebase]").forEach(_this.rewriteURL("codebase"));
          el.querySelectorAll("object[archive]").forEach(_this.rewriteURLList("archive"));
          /* console.timeEnd(); */

          /* el.querySelectorAll("command[icon]").forEach(this.rewriteURL("icon")); */
          // obsolte
        });
      }
    }, {
      key: "rewriteURL",
      value: function rewriteURL(attr) {
        var _this2 = this;

        return function (el) {
          try {
            el.setAttribute(attr, new URL(el.getAttribute(attr), _this2.href).href);
          } catch (e) {
            if (process.env.DEBUG) console.warn("Couldn't rewrite URL in attribute ".concat(attr, " on element"), el);
          }
        };
      }
    }, {
      key: "rewriteURLSrcSet",
      value: function rewriteURLSrcSet(attr) {
        var _this3 = this;

        return function (el) {
          try {
            el.setAttribute(attr, el.getAttribute(attr).split(/\s*,\s*/).map(function (str) {
              var pair = str.split(/\s+/);
              pair[0] = new URL(pair[0], _this3.href).href;
              return pair.join(" ");
            }).join(", "));
          } catch (e) {
            if (process.env.DEBUG) console.warn("Couldn't rewrite URLs in attribute ".concat(attr, " on element"), el);
          }
        };
      }
    }, {
      key: "rewriteURLList",
      value: function rewriteURLList(attr) {
        var _this4 = this;

        return function (el) {
          try {
            el.setAttribute(attr, el.getAttribute(attr).split(/[\s,]+/).map(function (str) {
              return new URL(str, _this4.href).href;
            }).join(", "));
          } catch (e) {
            if (process.env.DEBUG) console.warn("Couldn't rewrite URLs in attribute ".concat(attr, " on element"), el);
          }
        };
      }
    }]);

    return _class;
  }((0, _scriptHack.scriptMixin)(C));
};

exports.updateMixin = updateMixin;