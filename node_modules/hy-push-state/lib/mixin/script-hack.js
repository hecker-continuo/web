"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scriptMixin = void 0;

var _esm = require("rxjs/_esm5");

var _operators = require("rxjs/_esm5/operators");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// ### Experimental script feature
// TODO
var scriptMixin = function scriptMixin(C) {
  return /*#__PURE__*/function (_C) {
    _inherits(_class, _C);

    var _super = _createSuper(_class);

    function _class() {
      _classCallCheck(this, _class);

      return _super.apply(this, arguments);
    }

    _createClass(_class, [{
      key: "tempRemoveScriptTags",
      // This function removes all script tags (as query'ed by `scriptSelector`) from the response.
      value: function tempRemoveScriptTags(replaceEls) {
        var _this = this;

        var scripts = [];
        replaceEls.forEach(function (docfrag) {
          return Array.from(docfrag.querySelectorAll(_this.scriptSelector)).forEach(function (script) {
            var pair = [script, script.previousSibling];
            script.parentNode.removeChild(script);
            scripts.push(pair);
          });
        });
        return scripts;
      } // Attempts to (synchronously) insert a `script` tag into the DOM, *before* a given `ref` element.

    }, {
      key: "insertScript",
      value: function insertScript(_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            script = _ref2[0],
            ref = _ref2[1];

        // Temporarily overwrite `document.wirte` to simulate its behavior during the initial load.
        // This only works because scripts are inserted one-at-a-time (via `concatMap`).
        var originalWrite = document.write;

        document.write = function () {
          var temp = document.createElement("div");

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          temp.innerHTML = args.join();
          Array.from(temp.childNodes).forEach(function (node) {
            ref.parentNode.insertBefore(node, ref.nextSibling);
          });
        }; // If the script tag needs to fetch its source code, we insert it into the DOM,
        // but we return an observable that only completes once the script has fired its `load` event.


        return script.src !== "" ? _esm.Observable.create(function (observer) {
          script.addEventListener("load", function (x) {
            document.write = originalWrite;
            observer.complete(x);
          });
          script.addEventListener("error", function (x) {
            document.write = originalWrite;
            observer.error(x);
          });
          ref.parentNode.insertBefore(script, ref.nextSibling);
        }) : // Otherwise we insert it into the DOM and reset the `document.write` function.
        (0, _esm.of)({}).pipe((0, _operators.tap)(function () {
          ref.parentNode.insertBefore(script, ref.nextSibling);
          document.write = originalWrite;
        }));
      } // Takes a list of `script`--`ref` pairs, and inserts them into the DOM one-by-one.

    }, {
      key: "reinsertScriptTags",
      value: function reinsertScriptTags(context) {
        if (!this.scriptSelector) return (0, _esm.of)(context);
        var scripts = context.scripts;
        return (0, _esm.from)(scripts).pipe((0, _operators.concatMap)(this.insertScript.bind(this)), (0, _operators.catchError)(function (error) {
          throw Object.assign(context, {
            error: error
          });
        })).toPromise().then(function () {
          return context;
        });
      }
    }]);

    return _class;
  }(C);
};

exports.scriptMixin = scriptMixin;